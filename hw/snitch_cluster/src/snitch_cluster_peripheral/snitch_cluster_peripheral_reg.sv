// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module snitch_cluster_peripheral_reg (
        input wire clk,
        input wire arst_n,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [8:0] s_apb_paddr,
        input wire [63:0] s_apb_pwdata,
        input wire [7:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [63:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg__in_t hwif_in,
        output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [8:0] cpuif_addr;
    logic [63:0] cpuif_wr_data;
    logic [63:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [63:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[8:3], 3'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<8; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic PERF_CNT_EN[16];
            logic PERF_CNT_SEL[16];
            logic PERF_CNT[16];
        } PERF_REGS;
        logic SCRATCH[4];
        logic CL_CLINT_SET;
        logic CL_CLINT_CLEAR;
        logic ICACHE_PREFETCH_ENABLE;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [63:0] decoded_wr_data;
    logic [63:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.PERF_REGS.PERF_CNT_EN[i0] = cpuif_req_masked & (cpuif_addr == 9'h0 + (9)'(i0) * 9'h8);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.PERF_REGS.PERF_CNT_SEL[i0] = cpuif_req_masked & (cpuif_addr == 9'h80 + (9)'(i0) * 9'h8);
            is_external |= cpuif_req_masked & (cpuif_addr == 9'h80 + (9)'(i0) * 9'h8);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.PERF_REGS.PERF_CNT[i0] = cpuif_req_masked & (cpuif_addr == 9'h100 + (9)'(i0) * 9'h8);
            is_external |= cpuif_req_masked & (cpuif_addr == 9'h100 + (9)'(i0) * 9'h8);
        end
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.SCRATCH[i0] = cpuif_req_masked & (cpuif_addr == 9'h180 + (9)'(i0) * 9'h8);
        end
        decoded_reg_strb.CL_CLINT_SET = cpuif_req_masked & (cpuif_addr == 9'h1a0);
        is_external |= cpuif_req_masked & (cpuif_addr == 9'h1a0) & cpuif_req_is_wr;
        decoded_reg_strb.CL_CLINT_CLEAR = cpuif_req_masked & (cpuif_addr == 9'h1a8);
        is_external |= cpuif_req_masked & (cpuif_addr == 9'h1a8) & cpuif_req_is_wr;
        decoded_reg_strb.ICACHE_PREFETCH_ENABLE = cpuif_req_masked & (cpuif_addr == 9'h1b0);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } ENABLE;
            } PERF_CNT_EN[16];
        } PERF_REGS;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } SCRATCH;
        } SCRATCH[4];
        struct {
            struct {
                logic next;
                logic load_next;
            } ICACHE_PREFETCH_ENABLE;
        } ICACHE_PREFETCH_ENABLE;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic value;
                } ENABLE;
            } PERF_CNT_EN[16];
        } PERF_REGS;
        struct {
            struct {
                logic [31:0] value;
            } SCRATCH;
        } SCRATCH[4];
        struct {
            struct {
                logic value;
            } ICACHE_PREFETCH_ENABLE;
        } ICACHE_PREFETCH_ENABLE;
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<16; i0++) begin
        // Field: snitch_cluster_peripheral_reg.PERF_REGS.PERF_CNT_EN[].ENABLE
        always_comb begin
            automatic logic [0:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value;
            load_next_c = '0;
            if(decoded_reg_strb.PERF_REGS.PERF_CNT_EN[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.PERF_REGS.PERF_CNT_EN[i0].ENABLE.next = next_c;
            field_combo.PERF_REGS.PERF_CNT_EN[i0].ENABLE.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value <= 1'h1;
            end else begin
                if(field_combo.PERF_REGS.PERF_CNT_EN[i0].ENABLE.load_next) begin
                    field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value <= field_combo.PERF_REGS.PERF_CNT_EN[i0].ENABLE.next;
                end
            end
        end
        assign hwif_out.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value = field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value;
    end
    for(genvar i0=0; i0<16; i0++) begin

        assign hwif_out.PERF_REGS.PERF_CNT_SEL[i0].req = decoded_reg_strb.PERF_REGS.PERF_CNT_SEL[i0];
        assign hwif_out.PERF_REGS.PERF_CNT_SEL[i0].req_is_wr = decoded_req_is_wr;
        assign hwif_out.PERF_REGS.PERF_CNT_SEL[i0].wr_data = decoded_wr_data;
        assign hwif_out.PERF_REGS.PERF_CNT_SEL[i0].wr_biten = decoded_wr_biten;
    end
    for(genvar i0=0; i0<16; i0++) begin

        assign hwif_out.PERF_REGS.PERF_CNT[i0].req = decoded_reg_strb.PERF_REGS.PERF_CNT[i0];
        assign hwif_out.PERF_REGS.PERF_CNT[i0].req_is_wr = decoded_req_is_wr;
        assign hwif_out.PERF_REGS.PERF_CNT[i0].wr_data = decoded_wr_data;
        assign hwif_out.PERF_REGS.PERF_CNT[i0].wr_biten = decoded_wr_biten;
    end
    for(genvar i0=0; i0<4; i0++) begin
        // Field: snitch_cluster_peripheral_reg.SCRATCH[].SCRATCH
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.SCRATCH[i0].SCRATCH.value;
            load_next_c = '0;
            if(decoded_reg_strb.SCRATCH[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.SCRATCH[i0].SCRATCH.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.SCRATCH[i0].SCRATCH.next = next_c;
            field_combo.SCRATCH[i0].SCRATCH.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.SCRATCH[i0].SCRATCH.load_next) begin
                field_storage.SCRATCH[i0].SCRATCH.value <= field_combo.SCRATCH[i0].SCRATCH.next;
            end
        end
    end

    assign hwif_out.CL_CLINT_SET.req = decoded_req_is_wr ? decoded_reg_strb.CL_CLINT_SET : '0;
    assign hwif_out.CL_CLINT_SET.req_is_wr = decoded_req_is_wr;
    assign hwif_out.CL_CLINT_SET.wr_data = decoded_wr_data;
    assign hwif_out.CL_CLINT_SET.wr_biten = decoded_wr_biten;

    assign hwif_out.CL_CLINT_CLEAR.req = decoded_req_is_wr ? decoded_reg_strb.CL_CLINT_CLEAR : '0;
    assign hwif_out.CL_CLINT_CLEAR.req_is_wr = decoded_req_is_wr;
    assign hwif_out.CL_CLINT_CLEAR.wr_data = decoded_wr_data;
    assign hwif_out.CL_CLINT_CLEAR.wr_biten = decoded_wr_biten;
    // Field: snitch_cluster_peripheral_reg.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.value;
        load_next_c = '0;
        if(decoded_reg_strb.ICACHE_PREFETCH_ENABLE && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.next = next_c;
        field_combo.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.load_next) begin
            field_storage.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.value <= field_combo.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.next;
        end
    end
    assign hwif_out.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.value = field_storage.ICACHE_PREFETCH_ENABLE.ICACHE_PREFETCH_ENABLE.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        for(int i0=0; i0<16; i0++) begin
            wr_ack |= hwif_in.PERF_REGS.PERF_CNT_SEL[i0].wr_ack;
        end
        for(int i0=0; i0<16; i0++) begin
            wr_ack |= hwif_in.PERF_REGS.PERF_CNT[i0].wr_ack;
        end
        wr_ack |= hwif_in.CL_CLINT_SET.wr_ack;
        wr_ack |= hwif_in.CL_CLINT_CLEAR.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        for(int i0=0; i0<16; i0++) begin
            rd_ack |= hwif_in.PERF_REGS.PERF_CNT_SEL[i0].rd_ack;
        end
        for(int i0=0; i0<16; i0++) begin
            rd_ack |= hwif_in.PERF_REGS.PERF_CNT[i0].rd_ack;
        end
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [63:0] readback_data;

    // Assign readback values to a flattened array
    logic [63:0] readback_array[52];
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 0][0:0] = (decoded_reg_strb.PERF_REGS.PERF_CNT_EN[i0] && !decoded_req_is_wr) ? field_storage.PERF_REGS.PERF_CNT_EN[i0].ENABLE.value : '0;
        assign readback_array[i0 * 1 + 0][63:1] = '0;
    end
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 16] = hwif_in.PERF_REGS.PERF_CNT_SEL[i0].rd_ack ? hwif_in.PERF_REGS.PERF_CNT_SEL[i0].rd_data : '0;
    end
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 32] = hwif_in.PERF_REGS.PERF_CNT[i0].rd_ack ? hwif_in.PERF_REGS.PERF_CNT[i0].rd_data : '0;
    end
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0 * 1 + 48][31:0] = (decoded_reg_strb.SCRATCH[i0] && !decoded_req_is_wr) ? field_storage.SCRATCH[i0].SCRATCH.value : '0;
        assign readback_array[i0 * 1 + 48][63:32] = '0;
    end

    // Reduce the array
    always_comb begin
        automatic logic [63:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<52; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
